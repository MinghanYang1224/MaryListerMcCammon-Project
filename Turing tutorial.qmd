---
title: "Turing package"
author: "Minghan Yang"
date: today
format:
  html:
    theme: flatly
    code-fold: false
    toc: true
    number-sections: true
execute:
  kernel: julia
  options:
    threads: 1  # Set the number of threads here
#bibliography: references.bib
---

## Tutorial 
Turing is a ecosystem of Julia packages for Bayesian Inference using probabilistic programming. 

Getting ready: load the packages.

```{julia, echo=False}
using Pkg
#Pkg.add("Distributions")
#Pkg.add("StatsPlots")
#Pkg.add("LaTeXStrings")
#Pkg.add("BenchmarkTools")
#Pkg.add("Random")
#Pkg.add("Turing")
#Pkg.add("MCMCChains")
using Distributions, StatsPlots, LaTeXStrings, DifferentialEquations, DataFrames, BenchmarkTools, LinearAlgebra, Random
using Turing
using MCMCChains

```

### Normal distribution
```{julia}
mu=0
sigma=1
plot(Normal(mu, sigma),
    legend = false,
    xlims = (-5,5),
    ylims = (0,1),
    linewidth = 2)
```

### Coinflip Example
Turing will perform automatic inference on all variables that you specify using `~`.

Just like you would write in mathematical form:

$$\begin{aligned}
p &\sim \text{Beta}(1,1) \\
\text{coin flip} &\sim \text{Bernoulli}(p)
\end{aligned}$$ 

**Example**: Unfair coin with $p$ = 0.7.

```{julia}
# Unconditioned coinflip model with `N` observations.
@model function coinflip(; N::Int)
    # Our prior belief about the probability of heads in a coin toss.
    p ~ Beta(1, 1)

    # Heads or tails of a coin are drawn from `N` independent and identically
    # distributed Bernoulli distributions with success rate `p`.
    y ~ filldist(Bernoulli(p), N)

    return y
end;
```

```{julia}
N = 100;
p_true = 0.5
rand(coinflip(; N))
```

```{julia}
data = rand(Bernoulli(p_true), N);

coinflip(y::AbstractVector{<:Real}) = coinflip(; N=length(y)) | (; y)

model = coinflip(data);
```

In this example, we use a Hamiltonian Monte Carlo sampler to draw these samples.

```{julia}
sampler = NUTS();
chain = sample(model, sampler, 2_000, progress=false);
histogram(chain)
```

```{julia}
# Visualize a blue density plot of the approximate posterior distribution using HMC (see Chain 1 in the legend).
density(chain; xlim=(0, 1), legend=:best, w=2, c=:blue)

# Visualize the true probability of heads in red.
vline!([p_true]; label="True probability", c=:red)
```
