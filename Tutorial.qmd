---
title: "Tutorial"
author: Minghan Yang
date: today
format:
  html:
    theme: flatly
    code-fold: false
    toc: true
    number-sections: true
  pdf:
    documentclass: article
    toc: true
    number-sections: true
    geometry: "left=2cm, right=2cm, top=2cm, bottom=2cm"
execute:
  kernel: julia
  options:
    threads: 8  # Set the number of threads here
bibliography: references.bib
---

# Survival Analysis Basics
Survival analysis is often used in areas such as biology, medicine, and engineering. For cancer studies, one typical topic is the survival of cancer patients after a diagnosis of cancer.

The data used in survival analysis is often sample of \textbf{times to event} from a population ($t_1, t_2, \ldots, t_n$). in our project, we use the breast cancer patient data from hospitals in Rotterdam. 

* Survival Time: The duration of time from a starting point (for example, diagnosis of a disease) to the occurrence of an event (e.g. death). 

* Vital status (censoring indicators): $\delta_1, \delta_2, \ldots, \delta_n$. 
    
    $\delta_i=1$: death, 
    
    $\delta_i=0$: alive / right-censored.

In many studies, some subjects may not experience the event before the study ends, leading to censored data. Survival analysis methods can appropriately handle these censored observations. It helps estimate survival rates at different time points, which is vital for predicting and understanding the progression of diseases, patient outcomes, and the effectiveness of treatments.

## Censoring
Censoring occurs when the exact time of the event is not known for some subjects. This happens for various reasons, such as the study ending before the event occurs, the subject withdrawing from the study, or loss to follow-up. For example, if a study ends before a patient dies or if a patient leaves the study early, their data is \emph{censored}. If death, failure of a machine or relapse of a disease happens, then the data is an \emph{event}.

1. **Right Censoring**

Right censoring occurs when the event of interest has not happened by the end of the study period for some subjects. We only know that the event time exceeds a certain value.    

Right-censoring is a common feature in survival data and must be appropriately handled to avoid bias in the analysis. Survival analysis techniques, like the Kaplan-Meier estimator and Cox proportional hazards model, are specifically designed to deal with right-censored data, allowing researchers to make valid inferences about the time-to-event process even when not all events are observed.

2. **Left Censoring**

Left censoring happens when the event of interest has already occurred before the subject is observed or enters the study. We only know that the event time is less than a certain value.

If a subject is left-censored at time $t$, it means the event time $T$ is less than $t$.

3. **Interval Censoring**

Interval censoring occurs when the event time is known to lie within a specific interval but the exact time is unknown.

4. **Administrative Censoring**

Administrative censoring refers to the situation where all subjects are censored at a predefined time point due to the end of the study.

5. **Random Censoring**

Random censoring occurs when the censoring times are random and independent of the event times. For example, subjects dropping out of a study at random times due to various reasons such as relocation or withdrawal.

## Functions
1. **Lifetime distribution function**

\begin{equation}
    F(t) = \mathbb{P}(T<t), x\geq 0.
\end{equation}
This function describes the probability of failing up age of t or of having a life span of at most t. $F(t)$ is a monotone and increasing function. $0 \leq F(t) \leq 1$. The derivative of $F(t)$ is the corresponding PDF $f(t)$.

2. **Survival function**

The survival function is another representative of lifetime distribution. It is defined as
\begin{equation}
    S(t)= \mathbb{P}(T>t) = 1-F(t)=\mathbb{P}(T>t)
\end{equation}
The survival function is also known as the reliability function, indicating the probability of surviving a time of $t$. It is the probability of exceeding time $t$. The study of survival function is crucial in survival analysis.

**Properties:**

* The survival function $S(t)$ is monotone and decreasing over $[0, \infty)$. Furthermore, $S(t)$ satisfies $S(0) = 1$, $S(\infty) = 0$.
* The survival function is related to $F(t)$: $S(t)=1 - F(t)$.
* The survival function appropriately handles right-censored data. Censored observations contribute information up until the censoring time but not beyond it. This allows the survival function to provide unbiased estimates even when not all subjects have experienced the event by the end of the study.


3. **Hazard function**

Hazard function is defined to be $$h(t) = \lim_{ dt \to 0} \frac{\mathbb{P}[t \leq T \leq t + dt \mid T \geq t]}{ dt}. $$
This describes the instantaneous rate at which events occur, given no previous event. It is the probability that an event occurs in a very small time interval, given survival up to the start of the interval.

The hazard function is the ratio of the probability of the event occurring at time $t$ to the probability of surviving up to time $t$.
\begin{equation}
    h(t)=\frac{f(t)}{S(t)}
\end{equation}
Proof: 
\begin{align*}
    h(t) &= \lim_{dt \to 0} \frac{\mathbb{P}[t \leq T \leq t + dt | T \geq t]}{dt} \\
    &= \lim_{dt \to 0} \frac{\mathbb{P}[t \leq T \leq t + dt , T \geq t]}{dt \cdot \mathbb{P}(T\geq t)} \\
    &= \lim_{dt \to 0} \frac{\mathbb{P}[t \leq T \leq t + dt]}{dt \cdot \mathbb{P}(T\geq t)} \\
    &= \lim_{dt \to 0} \frac{\mathbb{P}[t \leq T \leq t + dt]}{dt} \cdot \frac{1}{\mathbb{P}(T\geq t)} \\
    &= f(t) \cdot \frac{1}{S(t)}   \quad \blacksquare
\end{align*}
**Properties:**

* $f(0)=h(0)$
* $f(t) \geq h(t), \forall t>0$, because $S(t) \leq 1, \forall t > 0$
* $h(t)$ is \emph{not} a density function because it is not normalised.
* Any function $h(t)$ is a hazard rate function iff:
    i) $h(t) \geq 0, \forall t \geq 0$
    ii) $\int_0^{\infty} h(t) \, dt = \infty$
* The survival function can be expressed in terms of the hazard function:
    \begin{equation}
        S(t) = \exp \left\{ - \int_{0}^{t} h(u) \, du \right\}
    \end{equation}
    Proof: 
    \begin{align*}
        h(t) &= \frac{f(t)}{S(t)} = \frac{F'(t)}{1-F(t)} = - \frac{S'(t)}{S(t)} = - \frac{d}{dt}(\ln{S(t)})\\
        \int_0^t h(u) \,du &= - [\ln{S(u)}]_0^t = -\ln{S(t)} + \ln{S(0)} = -\ln{S(t)} \quad \text{, as $S(0)=1$} \\
        \therefore S(t) &= \exp\left\{- \int_0^t h(u) \, du\right\} \quad \blacksquare
    \end{align*}

4. **Cumulative hazard function**

The function 
\begin{equation}
    H(t) = \int_0^t h(s) \, ds
\end{equation}
is known as the cumulative hazard function.

**Properties:**

* $H(0)=0$
* $\lim_{t \to \infty}$ $H(t) = \infty$
* $H(t)$ is non-decreasing
* $H(t) = - \ln{S(t)} = - \ln{[1-F(t)]}$

5. **Likelihood Function**

When $\delta_i=0$, i.e. alive/right-censored, $L_i=S(t_i\mid \theta)$.

The likelihood function is given by 
\begin{align*}
    L(\theta) &= \prod_{i=1}^n f(t_i \mid \theta)^{\delta_i} S(t_i \mid \theta)^{1-\delta_i} \\
    &= \prod_{i=1}^n [h(t_i \mid \theta) \cdot S(t_i \mid \theta)]^{\delta_i} S(t_i \mid \theta)^{1-\delta_i}, \quad \text{because $h(t)=f(t)/S(t)$}\\
    &= \prod_{i=1}^n h(t_i \mid \theta)^{\delta_i} \cdot \exp \left\{ -H(t_i \mid \theta) \right\}, \quad \text{because $S(t) = \exp \left\{-H(t) \right\}$}
\end{align*}
Therefore, the log-likelihood is 
\begin{equation}
    \ell (\theta) = \sum_{i=1}^n \delta_i \log h(t_i \mid \theta, Y_0) - \sum_{i=1}^n H(t_i \mid \theta, Y_0).
\end{equation}
This allows for calculating the maximum likelihood estimates of the parameters $\theta$ after a hazard function is specified. 

# Hazard-Response Model
## Model Formulation
ODEs are used to characterise many physical systems, and using the system of ODEs to define the hazard function adds dynamics and interpretability. Here, we use the competitive Lotka-Volterra model to describe the competition between the hazard and response (from therapy, interventions and immune system). This model assumes the competing relationship between the hazard function $f(t)$ and the response $q(t)$, which is related to the immune system and interventions recieved at a population level [@Rubio]. The hazard-response model is defined through the below system of ODEs. 
$$
\begin{cases}
    h'(t) = \lambda h(t) \left( 1-\frac{h(t)}{\kappa}\right) - \alpha q(t) h(t), \quad &h(0)=h_0\\
    q'(t) = \beta q(t) \left( 1-\frac{q(t)}{\kappa}\right) -\alpha q(t) h(t) , \quad &q(0)=q_0\\
    H'(t) = h(t), \quad  &H(0)=0
\end{cases}
$$
where $\lambda > 0$, $\alpha \geq 0$, $\beta > 0$, $\kappa > 0$, $h_0 > 0$, $q_0 > 0$. The competition between hazard and response is modeled through $\alpha q(t) h(t)$, and the growth of the two are given by the logistic growth part $\lambda h(t) \left( 1-\frac{h(t)}{\kappa}\right)$. 

When $\alpha = 0$, there is no competition, and the hazard function will grow and reach a carrying capacity of $\kappa$ as the time tends to infinity. When $\alpha > 0$, both the hazard and the response will receive negative effect from the term $- \alpha q(t) h(t)$.

## Fixing the initial conditions
To numerically solve the system of ODEs, we need to specify the initial conditions $h_0$ and $q_0$. Based on prior knowledge, within 1 month ($\Delta t = 1/12$), approximately 1 in 1000 breast cancer patient die. So we use the approximation 
$$h_0=h(0)=-\frac{S'(0)}{S(0)} \approx -\frac{S'(\Delta t)}{S(\Delta t)} \approx -\frac{S(\Delta t)-S(0)}{\Delta t S(\Delta t)} \approx 0.01.$$

For $q_0$, we assume that treatment usually does not start at the beginning of the follow-up. It is likely that the treatment take some time to start, so the effect of reducing the hazard function should be small at the beginning, and we choose the value $q_0 = 10^{-6}$.

## Logarithmic formulation of the hazard-response model

By modeling the logarithmic hazard function, we ensure that the hazard function itself remains positive for all $t$, which is essential as negative hazards do not make practical sense. The logarithmic scale can improve the numerical stability of the computations, especially when solving differential equations.

$$
\begin{cases}
    \tilde{h}'(t) = \lambda \left( 1-\frac{\exp\{\tilde{h}(t)\}}{\kappa}\right) - \alpha \exp \{\tilde{q}(t)\}, \quad & \tilde{h}(0)=\log \{h_0\}\\
    \tilde{q}'(t) = \beta \left( 1-\frac{\exp\{\tilde{q}(t)\}}{\kappa}\right) -\alpha \exp\{\tilde{h}(t)\} , \quad & \tilde{q}(0)=\log \{q_0\}\\
    H'(t) = \exp\{\tilde{h}(t)\}, \quad  & H(0)=0
\end{cases}
$$
where $\tilde{h}(t) = \log \{h(t)\}$, and $\theta=(\lambda, \kappa, \alpha, \beta)$.

## Codes
The hazard-response model is defined through the below function
```{julia}
#| output: false
# Hazard-Response ODE model
function HazResp(dh, h, p, t)
    # Model parameters
    lambda, kappa, alpha, beta = p

    # ODE System
    dh[1] = lambda * h[1] * (1 - h[1] / kappa) - alpha * h[1] * h[2] # hazard
    dh[2] = beta * h[2] * (1 - h[2] / kappa) - alpha * h[1] * h[2] # response
    dh[3] = h[1] # cumulative hazard
    return nothing
end

```

For stability, we calculate the Jacobian manually to avoid computational instability caused by numerical approximation of the derivatives.
$$
J_HR(t,h,q,H,\theta) = 
\begin{pmatrix}
\lambda - \frac{2 \lambda h}{\kappa} - \alpha q & - \alpha h & 0 \\
-\alpha q & \beta - \frac{2 \beta h}{\kappa} - \alpha h & 0 \\
1 & 0 & 0
\end{pmatrix}
$$
where $\theta=(\lambda, \kappa, \alpha, \beta)$.

```{julia}
#| output: false
# Jacobian for Hazard-Response model
function jacHR(J, u, p, t)
    # Parameters
    lambda, kappa, alpha, beta = p
    # state variables
    h = u[1]
    q = u[2]

    # Jacobian
    J[1, 1] = lambda * (1 - 2 * h / kappa) - alpha * q
    J[1, 2] = -alpha * h
    J[1, 3] = 0.0
    J[2, 1] = -alpha * q
    J[2, 2] = beta * (1 - 2 * q / kappa) - alpha * h
    J[2, 3] = 0.0
    J[3, 1] = 1.0
    J[3, 2] = 0.0
    J[3, 3] = 0.0
    nothing
end
```

The logarithmic hazard-response model is defined through the below function
```{julia}
#| output: false
# Logarithmic Hazard-Response ODE model
function HazRespL(dlh, lh, p, t)
    # Model parameters
    lambda, kappa, alpha, beta = p

    # ODE System
    dlh[1] = lambda * (1 - exp(lh[1]) / kappa) - alpha * exp(lh[2]) # log hazard
    dlh[2] = beta * (1 - exp(lh[2]) / kappa) - alpha * exp(lh[1]) # log response
    dlh[3] = exp(lh[1]) # cumulative hazard
    return nothing
end
```

Its corresponding Jacobian is calculated to be:
$$
J_HR(t,h,q,H,\theta) = 
\begin{pmatrix}
-\frac{\lambda}{\kappa} \exp\{\tilde{h}(t)\} & - \alpha \exp \{\tilde{q}(t)\} & 0 \\
- \alpha \exp \{\tilde{h}(t)\} & -\frac{\beta}{\kappa} \exp \{\tilde{q}(t)\} & 0 \\
\exp\{\tilde{h}(t)\} & 0 & 0
\end{pmatrix}
$$

```{julia}
#| output: false
# Jacobian for Logarithmic Hazard-Response model
function jacHRL(J, u, p, t)
    # Parameters
    lambda, kappa, alpha, beta = p
    # state variables
    lh = u[1]
    lq = u[2]

    # Jacobian
    J[1, 1] = -lambda * exp(lh) / kappa
    J[1, 2] = -alpha * exp(lq)
    J[1, 3] = 0.0
    J[2, 1] = -alpha * exp(lh)
    J[2, 2] = -beta * exp(lq) / kappa
    J[2, 3] = 0.0
    J[3, 1] = exp(lh)
    J[3, 2] = 0.0
    J[3, 3] = 0.0
    nothing
end
```

Therefore we can define the ODE function for the logarithmic hazard-response model with explicit Jacobian and initial conditions:
```{julia}
#| output: false
using DifferentialEquations
# Hazard-Response model with explicit Jacobian
HRJL = ODEFunction(HazRespL; jac=jacHRL)

# Initial conditions (h,q,H)
lu0 = [log(1.0e-2), log(1.0e-6), 0.0]
```

# Bayesian Methods and Turing
As mentioned in Section 1, the log-likelihood can be calculated given the hazard function:
 \begin{equation}
    \ell (\theta) = \sum_{i=1}^n \delta_i \log h(t_i \mid \theta, Y_0) - \sum_{i=1}^n H(t_i \mid \theta, Y_0).
\end{equation}
For the hazard-response model, an analytical solution is not available. With an ODE solver from `DifferentialEquations.jl`, we will be able to solve for the hazard function, the response function, and the cumulative hazard function numerically [@Julia_differential_equations]. 
```{julia}
#| output: false
#  log likelihood function (log h and log q)
log_likL = function (par)
    # Parameters for the ODE
    odeparams = exp.(par)

    sol = solve(ODEProblem(HRJL, lu0, [0.0, tmax], odeparams); alg_hints=[:stiff])
    #  sol = solve(ODEProblem(HRJL, lu0, tspan0[i, :], odeparams[i, :]),Tsit5())
    OUT = sol(df.time)

    # Terms in the log log likelihood function
    ll_haz = sum(OUT[1, status])
    ll_chaz = sum(OUT[3, :])

    ll = ll_haz - ll_chaz
return ll
end
```

In our analysis, we choose `Gamma(2,2)` to be the priors of our parameters. This is because `Gamma(2,2)` is weakly informative, meaning it is broad enough to allow the data to inform the posterior distribution without being overly restrictive. It has a mean of 4 and variance of 8, which provides a reasonable range for the parameters in the absence of strong prior knowledge. With the help of `Turing.jl` [@Turing], we can apply MCMC samplers for posterior distributions of the parameters.

```{julia}
using Distributions, Turing
distprior = Gamma(2,2)

@model function bayesian_model(log_likL)
    # prior (defined on the positive parameters)
   odeparams ~ filldist(distprior, 4)
        params = log.(odeparams)

        Turing.@addlogprob!(log_likL(params))
    end
```

# Predictive Hazard
With the posterior distribution for the parameter $\theta$, we can obtain the posterior distribution of the hazard function $h_{\theta}(t)$. Given a MCMC sample of the parameter $\theta^{(1)}, \ldots, \theta^{(M)}$, the posterior hazard functions are $h(t|\theta^{(1)}), \ldots, h(t|\theta^{(M)})$. 

According to the relationship $h(t)=\frac{f(t)}{S(t)}$, the expected hazard should $\int \frac{f(t|\theta)}{S(t|\theta)} \pi(\theta|data) d\theta$.

On the other hand, the predictive distribution $f(t)$ for a future patient is 
$$
f(t | data) = \int_{\Theta} f(t|\theta) \pi(\theta|data) d\theta = \int_{\Theta} h(t|\theta) \exp (-H(t|\theta)) \pi(\theta|data) d\theta.
$$
Then we can calculate the posterior predictive hazard function, which is the function of interest if we hope to prognose the hazard of a future patient
$$
h(t|data) = \frac{f(t|data)}{1-\int_0^t f(r|data) dr}.
$$
However, the analytical solution of $h(t|data)$ is not obtainable, so we use posterior samples of parameters to obtain a Monte Carlo approximation of it, which is shown to be
$$
h(t|data) \approx \frac{\frac{1}{M} \sum_{j=1}^{M} h(t|\theta^{(j)}) \exp \{ -H(t|\theta^{(j)})\}}{\frac{1}{M} \sum_{j=1}^{M} \exp \{ -H(t|\theta^{(j)})\}},
$$
and the predictive survival function could be approximated by 
$$
S(t|data) \approx \sum_{j=1}^{M} \exp \{ -H(t|\theta^{(j)})\}.
$$

# Some Results
The marginal posterior distributions of the parameter $\theta=(\lambda, \kappa, \alpha, \beta)$ with priors are shown below:

```{julia}
#| echo: false
include("routinesODESurv.jl")
# read posterior samples as dataframe.
using CSV, DataFrames, Plots, StatsPlots
postsamples = CSV.read("postsamp.csv", DataFrame)

param_names = ["lambda", "kappa", "alpha", "beta"]
priors = [Gamma(2, 2) for _ in 1:4]

# define ranges in x axis for the four plots:
x_ranges = [
    range(0, stop=6,   length=1000),  # for lambda
    range(0, stop=0.5, length=1000),  # for kappa
    range(0, stop=11,  length=1000),  # for alpha
    range(0, stop=10,  length=1000)   # for beta
]

# Plot posterior vs prior
plot_list = [plot_posterior_with_prior(postsamples, priors, i, param_names[i], x_ranges[i]) for i in 1:4]
plot(plot_list..., layout=(2, 2), size = (650,500))
```

The posterior predictive hazard function and response function.
```{julia}
#| echo: false
# Number of posterior samples
M = ncol(postsamples)

# define time vector
t_vector = [0.01:0.1:20.5;]
nt = length(t_vector)

# Posterior predictive hazard
Predictive_hazard = zeros(nt)
Predictive_hazardU = zeros(nt)
Predictive_hazardL = zeros(nt)
for i in 1:nt
    Predictive_hazard[i] = PredHR(t_vector[i])[1]
    Predictive_hazardU[i] = PredHR(t_vector[i])[2]
    Predictive_hazardL[i] = PredHR(t_vector[i])[3]
end

# Postrior predictive response
Predictive_response = zeros(nt)
for i in 1:nt
    Predictive_response[i] = PredResp(t_vector[i])
end

# Posterior predictive survival 
Pred_S = zeros(nt)
Pred_SU = zeros(nt)
Pred_SL = zeros(nt)
for i in 1:nt
    Pred_S[i] = PredSurv(t_vector[i])[1]
    Pred_SU[i] = PredSurv(t_vector[i])[2]
    Pred_SL[i] = PredSurv(t_vector[i])[3]
end

# Plot the posterior predictive hazard and response
plot(t_vector, Predictive_hazard, label="Predictive Hazard", lw=2, ylim=(0,0.13))
plot!(t_vector, Predictive_response, label="Predictive Response", lw=2)
xlabel!("time")
ylabel!("Predictive Functions")
title!("Posterior Predictive Functions")

``` 

Posterior predictive hazard with 95% credible interval.
```{julia}
#| echo: false
plot(t_vector, Predictive_hazard, label="Predictive Hazard", lw=2, ylim=(0,0.09))
plot!(t_vector, Predictive_hazardU, fillrange=Predictive_hazardL, fillalpha=0.3, label="95% CI", color=:grey, linecolor=:transparent)
xlabel!("time")
ylabel!("Predictive Hazard Function")
title!("Posterior Predictive Hazard")
```

Posterior predictive survival with 95% credible interval.
```{julia}
#| echo: false
plot(t_vector, Pred_S, label="Predictive Survival", lw=2, ylim=(0,1))
plot!(t_vector, Pred_SU, fillrange=Pred_SL, fillalpha=0.3, label="95% CI", color=:grey, linecolor=:transparent)
xlabel!("time")
ylabel!("Predictive Survival Function")
title!("Posterior Predictive Survival")
```

We can also compare the predictive survival function with the Kaplan-Meier estimator.
```{julia}
#| echo: false
df_full = CSV.File("rotterdamFull.csv");
df = DataFrame(time=collect(df_full.dtime) ./ 365.25,
    status=collect(df_full.death))
# Sorting df by time
sorted_indices = sortperm(df[:, :time]) # increasing order
df = df[sorted_indices, :]
#= Survival times =#
times = df.time; 

# Compare with Kaplan-Meier estimator
using Survival
km = fit(KaplanMeier, df.time, df.status)
ktimes = sort(unique(times))
ksurvival_probs = km.survival

# Comparison plot
plot(ktimes, ksurvival_probs,
    xlabel = "Time (years)", ylabel = "Survival", title = "Kaplan-Meier VS Posterior Predictive Survival",
    label = "Kaplan-Meier",
  xlims = (0.0001,maximum(times)),   xticks = 0:2:maximum(times), linewidth=3,
  linecolor = "gray", ylims = (0,1), linestyle=:solid)
plot!(t_vector, Pred_S, label="Predictive Survival", lw=2)
```

We can also explore many other interpretation of the results for communication, for example the Restricted Mean Survival Time (RMST) which measures the averaged time that an individual in the population is expected to survive within a certain time frame [@RMST].

```{julia}
#| echo: false
#| warning: false
# Define a function for trapezoidal integration
function trapz(x, y)
    # x: time points
    # y: survival values at those time points
    n = length(x)
    integral = 0.0
    for i in 1:(n-1)
        integral += 0.5 * (x[i+1] - x[i]) * (y[i+1] + y[i])
    end
    return integral
end

# Define time horizon for RMST (for example, tau = 20.5)
tau = 20.5

# Compute the RMST by integrating the survival function over time up to tau
nt = length(t_vector)  # Assuming t_vector is already defined
RMST_tau = trapz(t_vector[t_vector .<= tau], Pred_S[t_vector .<= tau])

# Plot the predictive survival function
plot(t_vector, Pred_S, lw=2, label="Predictive Survival", xlabel="time", ylabel="Survival Probability", ylim=(0,1), legend=:topright)
title!("Posterior Predictive Survival")

# Shade the area under the predictive survival curve up to tau
plot!(t_vector[t_vector .<= tau], Pred_S[t_vector .<= tau], fillrange=0, fillalpha=0.3, label="Restricted Mean Survival Time", color=:lightblue)

# Annotate the plot with the RMST at tau
annotate!(tau/2, 0.25, text("RMST(τ=20.5) = $(round(RMST_tau, digits=2)) years", :black, :bold))
```

# Future Work
The current method apply to the analysis for population level. People might be interested in individual hazard predictions, then more covariated will be needed. It is reasonable that the hazard for individual is likely to be associated with the age, gender, deprivation level of that individual. A possible next step is exploring the incorporation of the covariates into the model. It might also be interesting to explore the application of this method to other topics outside medical statistics.

# Summary
The hazard function is a central concept in the analysis of survival data. In this work, we try to dynamically model the hazard function with the help of autonomous ordinary differential equations (ODEs). By using ODEs, we are able to improve the interpretability and flexibility of the model. With Bayesian methods and the help of MCMC, we are able to obtain some quantitative insights into the time evolution of the hazard function. To illustrate the practical application and interpretability, we present its application to the `rotterdam` dataset of breast cancer patient data and arrive at some interesting results. This case study shows that the hazard-response model facilitates the interpretation of competing processes involving the mortality hazard and population-level responses, potentially connected to clinical treatments and natural immune mechanisms.
